{"ast":null,"code":"import { clear, drawParticle, drawParticlePlugin, drawPlugin, paintBase } from \"../Utils/CanvasUtils\";\nimport { getStyleFromHsl, getStyleFromRgb, rangeColorToHsl, rangeColorToRgb } from \"../Utils/ColorUtils\";\nimport { deepExtend } from \"../Utils/Utils\";\nimport { generatedAttribute } from \"./Utils/Constants\";\nfunction setTransformValue(factor, newFactor, key) {\n  var _a;\n  const newValue = newFactor[key];\n  if (newValue !== undefined) {\n    factor[key] = ((_a = factor[key]) !== null && _a !== void 0 ? _a : 1) * newValue;\n  }\n}\nexport class Canvas {\n  constructor(container) {\n    this.container = container;\n    this.size = {\n      height: 0,\n      width: 0\n    };\n    this._context = null;\n    this._generatedCanvas = false;\n    this._preDrawUpdaters = [];\n    this._postDrawUpdaters = [];\n    this._resizePlugins = [];\n    this._colorPlugins = [];\n  }\n  clear() {\n    const options = this.container.actualOptions,\n      trail = options.particles.move.trail;\n    if (options.backgroundMask.enable) {\n      this.paint();\n    } else if (trail.enable && trail.length > 0 && this._trailFillColor) {\n      this._paintBase(getStyleFromRgb(this._trailFillColor, 1 / trail.length));\n    } else {\n      this.draw(ctx => {\n        clear(ctx, this.size);\n      });\n    }\n  }\n  destroy() {\n    var _a;\n    if (this._generatedCanvas) {\n      (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n    } else {\n      this._resetOriginalStyle();\n    }\n    this.draw(ctx => {\n      clear(ctx, this.size);\n    });\n    this._preDrawUpdaters = [];\n    this._postDrawUpdaters = [];\n    this._resizePlugins = [];\n    this._colorPlugins = [];\n  }\n  draw(cb) {\n    if (!this._context) {\n      return;\n    }\n    return cb(this._context);\n  }\n  drawParticle(particle, delta) {\n    var _a;\n    if (particle.spawning || particle.destroyed) {\n      return;\n    }\n    const radius = particle.getRadius();\n    if (radius <= 0) {\n      return;\n    }\n    const pfColor = particle.getFillColor(),\n      psColor = (_a = particle.getStrokeColor()) !== null && _a !== void 0 ? _a : pfColor;\n    let [fColor, sColor] = this._getPluginParticleColors(particle);\n    if (!fColor) {\n      fColor = pfColor;\n    }\n    if (!sColor) {\n      sColor = psColor;\n    }\n    if (!fColor && !sColor) {\n      return;\n    }\n    this.draw(ctx => {\n      var _a, _b, _c, _d, _e;\n      const options = this.container.actualOptions,\n        zIndexOptions = particle.options.zIndex,\n        zOpacityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.opacityRate,\n        opacity = (_c = (_a = particle.bubble.opacity) !== null && _a !== void 0 ? _a : (_b = particle.opacity) === null || _b === void 0 ? void 0 : _b.value) !== null && _c !== void 0 ? _c : 1,\n        strokeOpacity = (_e = (_d = particle.stroke) === null || _d === void 0 ? void 0 : _d.opacity) !== null && _e !== void 0 ? _e : opacity,\n        zOpacity = opacity * zOpacityFactor,\n        zStrokeOpacity = strokeOpacity * zOpacityFactor,\n        transform = {},\n        colorStyles = {\n          fill: fColor ? getStyleFromHsl(fColor, zOpacity) : undefined\n        };\n      colorStyles.stroke = sColor ? getStyleFromHsl(sColor, zStrokeOpacity) : colorStyles.fill;\n      this._applyPreDrawUpdaters(ctx, particle, radius, zOpacity, colorStyles, transform);\n      drawParticle({\n        container: this.container,\n        context: ctx,\n        particle,\n        delta,\n        colorStyles,\n        backgroundMask: options.backgroundMask.enable,\n        composite: options.backgroundMask.composite,\n        radius: radius * (1 - particle.zIndexFactor) ** zIndexOptions.sizeRate,\n        opacity: zOpacity,\n        shadow: particle.options.shadow,\n        transform\n      });\n      this._applyPostDrawUpdaters(particle);\n    });\n  }\n  drawParticlePlugin(plugin, particle, delta) {\n    this.draw(ctx => {\n      drawParticlePlugin(ctx, plugin, particle, delta);\n    });\n  }\n  drawPlugin(plugin, delta) {\n    this.draw(ctx => {\n      drawPlugin(ctx, plugin, delta);\n    });\n  }\n  init() {\n    this.resize();\n    this._initStyle();\n    this._initCover();\n    this._initTrail();\n    this.initBackground();\n    this.initUpdaters();\n    this.initPlugins();\n    this.paint();\n  }\n  initBackground() {\n    const options = this.container.actualOptions,\n      background = options.background,\n      element = this.element,\n      elementStyle = element === null || element === void 0 ? void 0 : element.style;\n    if (!elementStyle) {\n      return;\n    }\n    if (background.color) {\n      const color = rangeColorToRgb(background.color);\n      elementStyle.backgroundColor = color ? getStyleFromRgb(color, background.opacity) : \"\";\n    } else {\n      elementStyle.backgroundColor = \"\";\n    }\n    elementStyle.backgroundImage = background.image || \"\";\n    elementStyle.backgroundPosition = background.position || \"\";\n    elementStyle.backgroundRepeat = background.repeat || \"\";\n    elementStyle.backgroundSize = background.size || \"\";\n  }\n  initPlugins() {\n    this._resizePlugins = [];\n    for (const [, plugin] of this.container.plugins) {\n      if (plugin.resize) {\n        this._resizePlugins.push(plugin);\n      }\n      if (plugin.particleFillColor || plugin.particleStrokeColor) {\n        this._colorPlugins.push(plugin);\n      }\n    }\n  }\n  initUpdaters() {\n    this._preDrawUpdaters = [];\n    this._postDrawUpdaters = [];\n    for (const updater of this.container.particles.updaters) {\n      if (updater.afterDraw) {\n        this._postDrawUpdaters.push(updater);\n      }\n      if (updater.getColorStyles || updater.getTransformValues || updater.beforeDraw) {\n        this._preDrawUpdaters.push(updater);\n      }\n    }\n  }\n  loadCanvas(canvas) {\n    var _a;\n    if (this._generatedCanvas) {\n      (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n    }\n    this._generatedCanvas = canvas.dataset && generatedAttribute in canvas.dataset ? canvas.dataset[generatedAttribute] === \"true\" : this._generatedCanvas;\n    this.element = canvas;\n    this._originalStyle = deepExtend({}, this.element.style);\n    this.size.height = canvas.offsetHeight;\n    this.size.width = canvas.offsetWidth;\n    this._context = this.element.getContext(\"2d\");\n    this.container.retina.init();\n    this.initBackground();\n  }\n  paint() {\n    const options = this.container.actualOptions;\n    this.draw(ctx => {\n      if (options.backgroundMask.enable && options.backgroundMask.cover) {\n        clear(ctx, this.size);\n        this._paintBase(this._coverColorStyle);\n      } else {\n        this._paintBase();\n      }\n    });\n  }\n  resize() {\n    if (!this.element) {\n      return;\n    }\n    const container = this.container,\n      pxRatio = container.retina.pixelRatio,\n      size = container.canvas.size,\n      newSize = {\n        width: this.element.offsetWidth * pxRatio,\n        height: this.element.offsetHeight * pxRatio\n      };\n    if (newSize.height === size.height && newSize.width === size.width && newSize.height === this.element.height && newSize.width === this.element.width) {\n      return;\n    }\n    const oldSize = Object.assign({}, size);\n    this.element.width = size.width = this.element.offsetWidth * pxRatio;\n    this.element.height = size.height = this.element.offsetHeight * pxRatio;\n    if (this.container.started) {\n      this.resizeFactor = {\n        width: size.width / oldSize.width,\n        height: size.height / oldSize.height\n      };\n    }\n  }\n  async windowResize() {\n    if (!this.element) {\n      return;\n    }\n    this.resize();\n    const container = this.container,\n      needsRefresh = container.updateActualOptions();\n    container.particles.setDensity();\n    this._applyResizePlugins();\n    if (needsRefresh) {\n      await container.refresh();\n    }\n  }\n  _applyPostDrawUpdaters(particle) {\n    var _a;\n    for (const updater of this._postDrawUpdaters) {\n      (_a = updater.afterDraw) === null || _a === void 0 ? void 0 : _a.call(updater, particle);\n    }\n  }\n  _applyPreDrawUpdaters(ctx, particle, radius, zOpacity, colorStyles, transform) {\n    var _a;\n    for (const updater of this._preDrawUpdaters) {\n      if (updater.getColorStyles) {\n        const {\n          fill,\n          stroke\n        } = updater.getColorStyles(particle, ctx, radius, zOpacity);\n        if (fill) {\n          colorStyles.fill = fill;\n        }\n        if (stroke) {\n          colorStyles.stroke = stroke;\n        }\n      }\n      if (updater.getTransformValues) {\n        const updaterTransform = updater.getTransformValues(particle);\n        for (const key in updaterTransform) {\n          setTransformValue(transform, updaterTransform, key);\n        }\n      }\n      (_a = updater.beforeDraw) === null || _a === void 0 ? void 0 : _a.call(updater, particle);\n    }\n  }\n  _applyResizePlugins() {\n    var _a;\n    for (const plugin of this._resizePlugins) {\n      (_a = plugin.resize) === null || _a === void 0 ? void 0 : _a.call(plugin);\n    }\n  }\n  _getPluginParticleColors(particle) {\n    let fColor, sColor;\n    for (const plugin of this._colorPlugins) {\n      if (!fColor && plugin.particleFillColor) {\n        fColor = rangeColorToHsl(plugin.particleFillColor(particle));\n      }\n      if (!sColor && plugin.particleStrokeColor) {\n        sColor = rangeColorToHsl(plugin.particleStrokeColor(particle));\n      }\n      if (fColor && sColor) {\n        break;\n      }\n    }\n    return [fColor, sColor];\n  }\n  _initCover() {\n    const options = this.container.actualOptions,\n      cover = options.backgroundMask.cover,\n      color = cover.color,\n      coverRgb = rangeColorToRgb(color);\n    if (coverRgb) {\n      const coverColor = {\n        r: coverRgb.r,\n        g: coverRgb.g,\n        b: coverRgb.b,\n        a: cover.opacity\n      };\n      this._coverColorStyle = getStyleFromRgb(coverColor, coverColor.a);\n    }\n  }\n  _initStyle() {\n    const element = this.element,\n      options = this.container.actualOptions;\n    if (!element) {\n      return;\n    }\n    if (options.fullScreen.enable) {\n      this._originalStyle = deepExtend({}, element.style);\n      element.style.setProperty(\"position\", \"fixed\", \"important\");\n      element.style.setProperty(\"z-index\", options.fullScreen.zIndex.toString(10), \"important\");\n      element.style.setProperty(\"top\", \"0\", \"important\");\n      element.style.setProperty(\"left\", \"0\", \"important\");\n      element.style.setProperty(\"width\", \"100%\", \"important\");\n      element.style.setProperty(\"height\", \"100%\", \"important\");\n    } else {\n      this._resetOriginalStyle();\n    }\n    for (const key in options.style) {\n      if (!key || !options.style) {\n        continue;\n      }\n      const value = options.style[key];\n      if (!value) {\n        continue;\n      }\n      element.style.setProperty(key, value, \"important\");\n    }\n  }\n  _initTrail() {\n    const options = this.container.actualOptions,\n      trail = options.particles.move.trail,\n      fillColor = rangeColorToRgb(trail.fillColor);\n    if (fillColor) {\n      const trail = options.particles.move.trail;\n      this._trailFillColor = {\n        r: fillColor.r,\n        g: fillColor.g,\n        b: fillColor.b,\n        a: 1 / trail.length\n      };\n    }\n  }\n  _paintBase(baseColor) {\n    this.draw(ctx => {\n      paintBase(ctx, this.size, baseColor);\n    });\n  }\n  _resetOriginalStyle() {\n    const element = this.element,\n      originalStyle = this._originalStyle;\n    if (element && originalStyle) {\n      element.style.position = originalStyle.position;\n      element.style.zIndex = originalStyle.zIndex;\n      element.style.top = originalStyle.top;\n      element.style.left = originalStyle.left;\n      element.style.width = originalStyle.width;\n      element.style.height = originalStyle.height;\n    }\n  }\n}","map":{"version":3,"names":["clear","drawParticle","drawParticlePlugin","drawPlugin","paintBase","getStyleFromHsl","getStyleFromRgb","rangeColorToHsl","rangeColorToRgb","deepExtend","generatedAttribute","setTransformValue","factor","newFactor","key","_a","newValue","undefined","Canvas","constructor","container","size","height","width","_context","_generatedCanvas","_preDrawUpdaters","_postDrawUpdaters","_resizePlugins","_colorPlugins","options","actualOptions","trail","particles","move","backgroundMask","enable","paint","length","_trailFillColor","_paintBase","draw","ctx","destroy","element","remove","_resetOriginalStyle","cb","particle","delta","spawning","destroyed","radius","getRadius","pfColor","getFillColor","psColor","getStrokeColor","fColor","sColor","_getPluginParticleColors","_b","_c","_d","_e","zIndexOptions","zIndex","zOpacityFactor","zIndexFactor","opacityRate","opacity","bubble","value","strokeOpacity","stroke","zOpacity","zStrokeOpacity","transform","colorStyles","fill","_applyPreDrawUpdaters","context","composite","sizeRate","shadow","_applyPostDrawUpdaters","plugin","init","resize","_initStyle","_initCover","_initTrail","initBackground","initUpdaters","initPlugins","background","elementStyle","style","color","backgroundColor","backgroundImage","image","backgroundPosition","position","backgroundRepeat","repeat","backgroundSize","plugins","push","particleFillColor","particleStrokeColor","updater","updaters","afterDraw","getColorStyles","getTransformValues","beforeDraw","loadCanvas","canvas","dataset","_originalStyle","offsetHeight","offsetWidth","getContext","retina","cover","_coverColorStyle","pxRatio","pixelRatio","newSize","oldSize","Object","assign","started","resizeFactor","windowResize","needsRefresh","updateActualOptions","setDensity","_applyResizePlugins","refresh","call","updaterTransform","coverRgb","coverColor","r","g","b","a","fullScreen","setProperty","toString","fillColor","baseColor","originalStyle","top","left"],"sources":["/Users/williamhart/Desktop/whportfolio/wh_portfolio/node_modules/tsparticles-engine/esm/Core/Canvas.js"],"sourcesContent":["import { clear, drawParticle, drawParticlePlugin, drawPlugin, paintBase } from \"../Utils/CanvasUtils\";\nimport { getStyleFromHsl, getStyleFromRgb, rangeColorToHsl, rangeColorToRgb } from \"../Utils/ColorUtils\";\nimport { deepExtend } from \"../Utils/Utils\";\nimport { generatedAttribute } from \"./Utils/Constants\";\nfunction setTransformValue(factor, newFactor, key) {\n    var _a;\n    const newValue = newFactor[key];\n    if (newValue !== undefined) {\n        factor[key] = ((_a = factor[key]) !== null && _a !== void 0 ? _a : 1) * newValue;\n    }\n}\nexport class Canvas {\n    constructor(container) {\n        this.container = container;\n        this.size = {\n            height: 0,\n            width: 0,\n        };\n        this._context = null;\n        this._generatedCanvas = false;\n        this._preDrawUpdaters = [];\n        this._postDrawUpdaters = [];\n        this._resizePlugins = [];\n        this._colorPlugins = [];\n    }\n    clear() {\n        const options = this.container.actualOptions, trail = options.particles.move.trail;\n        if (options.backgroundMask.enable) {\n            this.paint();\n        }\n        else if (trail.enable && trail.length > 0 && this._trailFillColor) {\n            this._paintBase(getStyleFromRgb(this._trailFillColor, 1 / trail.length));\n        }\n        else {\n            this.draw((ctx) => {\n                clear(ctx, this.size);\n            });\n        }\n    }\n    destroy() {\n        var _a;\n        if (this._generatedCanvas) {\n            (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n        }\n        else {\n            this._resetOriginalStyle();\n        }\n        this.draw((ctx) => {\n            clear(ctx, this.size);\n        });\n        this._preDrawUpdaters = [];\n        this._postDrawUpdaters = [];\n        this._resizePlugins = [];\n        this._colorPlugins = [];\n    }\n    draw(cb) {\n        if (!this._context) {\n            return;\n        }\n        return cb(this._context);\n    }\n    drawParticle(particle, delta) {\n        var _a;\n        if (particle.spawning || particle.destroyed) {\n            return;\n        }\n        const radius = particle.getRadius();\n        if (radius <= 0) {\n            return;\n        }\n        const pfColor = particle.getFillColor(), psColor = (_a = particle.getStrokeColor()) !== null && _a !== void 0 ? _a : pfColor;\n        let [fColor, sColor] = this._getPluginParticleColors(particle);\n        if (!fColor) {\n            fColor = pfColor;\n        }\n        if (!sColor) {\n            sColor = psColor;\n        }\n        if (!fColor && !sColor) {\n            return;\n        }\n        this.draw((ctx) => {\n            var _a, _b, _c, _d, _e;\n            const options = this.container.actualOptions, zIndexOptions = particle.options.zIndex, zOpacityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.opacityRate, opacity = (_c = (_a = particle.bubble.opacity) !== null && _a !== void 0 ? _a : (_b = particle.opacity) === null || _b === void 0 ? void 0 : _b.value) !== null && _c !== void 0 ? _c : 1, strokeOpacity = (_e = (_d = particle.stroke) === null || _d === void 0 ? void 0 : _d.opacity) !== null && _e !== void 0 ? _e : opacity, zOpacity = opacity * zOpacityFactor, zStrokeOpacity = strokeOpacity * zOpacityFactor, transform = {}, colorStyles = {\n                fill: fColor ? getStyleFromHsl(fColor, zOpacity) : undefined,\n            };\n            colorStyles.stroke = sColor ? getStyleFromHsl(sColor, zStrokeOpacity) : colorStyles.fill;\n            this._applyPreDrawUpdaters(ctx, particle, radius, zOpacity, colorStyles, transform);\n            drawParticle({\n                container: this.container,\n                context: ctx,\n                particle,\n                delta,\n                colorStyles,\n                backgroundMask: options.backgroundMask.enable,\n                composite: options.backgroundMask.composite,\n                radius: radius * (1 - particle.zIndexFactor) ** zIndexOptions.sizeRate,\n                opacity: zOpacity,\n                shadow: particle.options.shadow,\n                transform,\n            });\n            this._applyPostDrawUpdaters(particle);\n        });\n    }\n    drawParticlePlugin(plugin, particle, delta) {\n        this.draw((ctx) => {\n            drawParticlePlugin(ctx, plugin, particle, delta);\n        });\n    }\n    drawPlugin(plugin, delta) {\n        this.draw((ctx) => {\n            drawPlugin(ctx, plugin, delta);\n        });\n    }\n    init() {\n        this.resize();\n        this._initStyle();\n        this._initCover();\n        this._initTrail();\n        this.initBackground();\n        this.initUpdaters();\n        this.initPlugins();\n        this.paint();\n    }\n    initBackground() {\n        const options = this.container.actualOptions, background = options.background, element = this.element, elementStyle = element === null || element === void 0 ? void 0 : element.style;\n        if (!elementStyle) {\n            return;\n        }\n        if (background.color) {\n            const color = rangeColorToRgb(background.color);\n            elementStyle.backgroundColor = color ? getStyleFromRgb(color, background.opacity) : \"\";\n        }\n        else {\n            elementStyle.backgroundColor = \"\";\n        }\n        elementStyle.backgroundImage = background.image || \"\";\n        elementStyle.backgroundPosition = background.position || \"\";\n        elementStyle.backgroundRepeat = background.repeat || \"\";\n        elementStyle.backgroundSize = background.size || \"\";\n    }\n    initPlugins() {\n        this._resizePlugins = [];\n        for (const [, plugin] of this.container.plugins) {\n            if (plugin.resize) {\n                this._resizePlugins.push(plugin);\n            }\n            if (plugin.particleFillColor || plugin.particleStrokeColor) {\n                this._colorPlugins.push(plugin);\n            }\n        }\n    }\n    initUpdaters() {\n        this._preDrawUpdaters = [];\n        this._postDrawUpdaters = [];\n        for (const updater of this.container.particles.updaters) {\n            if (updater.afterDraw) {\n                this._postDrawUpdaters.push(updater);\n            }\n            if (updater.getColorStyles || updater.getTransformValues || updater.beforeDraw) {\n                this._preDrawUpdaters.push(updater);\n            }\n        }\n    }\n    loadCanvas(canvas) {\n        var _a;\n        if (this._generatedCanvas) {\n            (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n        }\n        this._generatedCanvas =\n            canvas.dataset && generatedAttribute in canvas.dataset\n                ? canvas.dataset[generatedAttribute] === \"true\"\n                : this._generatedCanvas;\n        this.element = canvas;\n        this._originalStyle = deepExtend({}, this.element.style);\n        this.size.height = canvas.offsetHeight;\n        this.size.width = canvas.offsetWidth;\n        this._context = this.element.getContext(\"2d\");\n        this.container.retina.init();\n        this.initBackground();\n    }\n    paint() {\n        const options = this.container.actualOptions;\n        this.draw((ctx) => {\n            if (options.backgroundMask.enable && options.backgroundMask.cover) {\n                clear(ctx, this.size);\n                this._paintBase(this._coverColorStyle);\n            }\n            else {\n                this._paintBase();\n            }\n        });\n    }\n    resize() {\n        if (!this.element) {\n            return;\n        }\n        const container = this.container, pxRatio = container.retina.pixelRatio, size = container.canvas.size, newSize = {\n            width: this.element.offsetWidth * pxRatio,\n            height: this.element.offsetHeight * pxRatio,\n        };\n        if (newSize.height === size.height &&\n            newSize.width === size.width &&\n            newSize.height === this.element.height &&\n            newSize.width === this.element.width) {\n            return;\n        }\n        const oldSize = Object.assign({}, size);\n        this.element.width = size.width = this.element.offsetWidth * pxRatio;\n        this.element.height = size.height = this.element.offsetHeight * pxRatio;\n        if (this.container.started) {\n            this.resizeFactor = {\n                width: size.width / oldSize.width,\n                height: size.height / oldSize.height,\n            };\n        }\n    }\n    async windowResize() {\n        if (!this.element) {\n            return;\n        }\n        this.resize();\n        const container = this.container, needsRefresh = container.updateActualOptions();\n        container.particles.setDensity();\n        this._applyResizePlugins();\n        if (needsRefresh) {\n            await container.refresh();\n        }\n    }\n    _applyPostDrawUpdaters(particle) {\n        var _a;\n        for (const updater of this._postDrawUpdaters) {\n            (_a = updater.afterDraw) === null || _a === void 0 ? void 0 : _a.call(updater, particle);\n        }\n    }\n    _applyPreDrawUpdaters(ctx, particle, radius, zOpacity, colorStyles, transform) {\n        var _a;\n        for (const updater of this._preDrawUpdaters) {\n            if (updater.getColorStyles) {\n                const { fill, stroke } = updater.getColorStyles(particle, ctx, radius, zOpacity);\n                if (fill) {\n                    colorStyles.fill = fill;\n                }\n                if (stroke) {\n                    colorStyles.stroke = stroke;\n                }\n            }\n            if (updater.getTransformValues) {\n                const updaterTransform = updater.getTransformValues(particle);\n                for (const key in updaterTransform) {\n                    setTransformValue(transform, updaterTransform, key);\n                }\n            }\n            (_a = updater.beforeDraw) === null || _a === void 0 ? void 0 : _a.call(updater, particle);\n        }\n    }\n    _applyResizePlugins() {\n        var _a;\n        for (const plugin of this._resizePlugins) {\n            (_a = plugin.resize) === null || _a === void 0 ? void 0 : _a.call(plugin);\n        }\n    }\n    _getPluginParticleColors(particle) {\n        let fColor, sColor;\n        for (const plugin of this._colorPlugins) {\n            if (!fColor && plugin.particleFillColor) {\n                fColor = rangeColorToHsl(plugin.particleFillColor(particle));\n            }\n            if (!sColor && plugin.particleStrokeColor) {\n                sColor = rangeColorToHsl(plugin.particleStrokeColor(particle));\n            }\n            if (fColor && sColor) {\n                break;\n            }\n        }\n        return [fColor, sColor];\n    }\n    _initCover() {\n        const options = this.container.actualOptions, cover = options.backgroundMask.cover, color = cover.color, coverRgb = rangeColorToRgb(color);\n        if (coverRgb) {\n            const coverColor = {\n                r: coverRgb.r,\n                g: coverRgb.g,\n                b: coverRgb.b,\n                a: cover.opacity,\n            };\n            this._coverColorStyle = getStyleFromRgb(coverColor, coverColor.a);\n        }\n    }\n    _initStyle() {\n        const element = this.element, options = this.container.actualOptions;\n        if (!element) {\n            return;\n        }\n        if (options.fullScreen.enable) {\n            this._originalStyle = deepExtend({}, element.style);\n            element.style.setProperty(\"position\", \"fixed\", \"important\");\n            element.style.setProperty(\"z-index\", options.fullScreen.zIndex.toString(10), \"important\");\n            element.style.setProperty(\"top\", \"0\", \"important\");\n            element.style.setProperty(\"left\", \"0\", \"important\");\n            element.style.setProperty(\"width\", \"100%\", \"important\");\n            element.style.setProperty(\"height\", \"100%\", \"important\");\n        }\n        else {\n            this._resetOriginalStyle();\n        }\n        for (const key in options.style) {\n            if (!key || !options.style) {\n                continue;\n            }\n            const value = options.style[key];\n            if (!value) {\n                continue;\n            }\n            element.style.setProperty(key, value, \"important\");\n        }\n    }\n    _initTrail() {\n        const options = this.container.actualOptions, trail = options.particles.move.trail, fillColor = rangeColorToRgb(trail.fillColor);\n        if (fillColor) {\n            const trail = options.particles.move.trail;\n            this._trailFillColor = {\n                r: fillColor.r,\n                g: fillColor.g,\n                b: fillColor.b,\n                a: 1 / trail.length,\n            };\n        }\n    }\n    _paintBase(baseColor) {\n        this.draw((ctx) => {\n            paintBase(ctx, this.size, baseColor);\n        });\n    }\n    _resetOriginalStyle() {\n        const element = this.element, originalStyle = this._originalStyle;\n        if (element && originalStyle) {\n            element.style.position = originalStyle.position;\n            element.style.zIndex = originalStyle.zIndex;\n            element.style.top = originalStyle.top;\n            element.style.left = originalStyle.left;\n            element.style.width = originalStyle.width;\n            element.style.height = originalStyle.height;\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}