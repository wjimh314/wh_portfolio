{"ast":null,"code":"function getItemsFromInitializer(container, map, initializers) {\n  let force = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  let res = map.get(container);\n  if (!res || force) {\n    res = [...initializers.values()].map(t => t(container));\n    map.set(container, res);\n  }\n  return res;\n}\nexport class Plugins {\n  constructor(engine) {\n    this._engine = engine;\n    this.plugins = [];\n    this.interactorsInitializers = new Map();\n    this.moversInitializers = new Map();\n    this.updatersInitializers = new Map();\n    this.interactors = new Map();\n    this.movers = new Map();\n    this.updaters = new Map();\n    this.presets = new Map();\n    this.drawers = new Map();\n    this.pathGenerators = new Map();\n  }\n  addInteractor(name, initInteractor) {\n    this.interactorsInitializers.set(name, initInteractor);\n  }\n  addParticleMover(name, initMover) {\n    this.moversInitializers.set(name, initMover);\n  }\n  addParticleUpdater(name, initUpdater) {\n    this.updatersInitializers.set(name, initUpdater);\n  }\n  addPathGenerator(type, pathGenerator) {\n    if (!this.getPathGenerator(type)) {\n      this.pathGenerators.set(type, pathGenerator);\n    }\n  }\n  addPlugin(plugin) {\n    if (!this.getPlugin(plugin.id)) {\n      this.plugins.push(plugin);\n    }\n  }\n  addPreset(presetKey, options) {\n    let override = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (override || !this.getPreset(presetKey)) {\n      this.presets.set(presetKey, options);\n    }\n  }\n  addShapeDrawer(type, drawer) {\n    if (!this.getShapeDrawer(type)) {\n      this.drawers.set(type, drawer);\n    }\n  }\n  destroy(container) {\n    this.updaters.delete(container);\n    this.movers.delete(container);\n    this.interactors.delete(container);\n  }\n  getAvailablePlugins(container) {\n    const res = new Map();\n    for (const plugin of this.plugins) {\n      if (!plugin.needsPlugin(container.actualOptions)) {\n        continue;\n      }\n      res.set(plugin.id, plugin.getPlugin(container));\n    }\n    return res;\n  }\n  getInteractors(container) {\n    let force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return getItemsFromInitializer(container, this.interactors, this.interactorsInitializers, force);\n  }\n  getMovers(container) {\n    let force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return getItemsFromInitializer(container, this.movers, this.moversInitializers, force);\n  }\n  getPathGenerator(type) {\n    return this.pathGenerators.get(type);\n  }\n  getPlugin(plugin) {\n    return this.plugins.find(t => t.id === plugin);\n  }\n  getPreset(preset) {\n    return this.presets.get(preset);\n  }\n  getShapeDrawer(type) {\n    return this.drawers.get(type);\n  }\n  getSupportedShapes() {\n    return this.drawers.keys();\n  }\n  getUpdaters(container) {\n    let force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return getItemsFromInitializer(container, this.updaters, this.updatersInitializers, force);\n  }\n  loadOptions(options, sourceOptions) {\n    for (const plugin of this.plugins) {\n      plugin.loadOptions(options, sourceOptions);\n    }\n  }\n  loadParticlesOptions(container, options) {\n    const updaters = this.updaters.get(container);\n    if (!updaters) {\n      return;\n    }\n    for (var _len = arguments.length, sourceOptions = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      sourceOptions[_key - 2] = arguments[_key];\n    }\n    for (const updater of updaters) {\n      if (updater.loadOptions) {\n        updater.loadOptions(options, ...sourceOptions);\n      }\n    }\n  }\n}","map":{"version":3,"names":["getItemsFromInitializer","container","map","initializers","force","res","get","values","t","set","Plugins","constructor","engine","_engine","plugins","interactorsInitializers","Map","moversInitializers","updatersInitializers","interactors","movers","updaters","presets","drawers","pathGenerators","addInteractor","name","initInteractor","addParticleMover","initMover","addParticleUpdater","initUpdater","addPathGenerator","type","pathGenerator","getPathGenerator","addPlugin","plugin","getPlugin","id","push","addPreset","presetKey","options","override","getPreset","addShapeDrawer","drawer","getShapeDrawer","destroy","delete","getAvailablePlugins","needsPlugin","actualOptions","getInteractors","getMovers","find","preset","getSupportedShapes","keys","getUpdaters","loadOptions","sourceOptions","loadParticlesOptions","updater"],"sources":["/Users/williamhart/Desktop/whportfolio/wh_portfolio/node_modules/tsparticles-engine/esm/Core/Utils/Plugins.js"],"sourcesContent":["function getItemsFromInitializer(container, map, initializers, force = false) {\n    let res = map.get(container);\n    if (!res || force) {\n        res = [...initializers.values()].map((t) => t(container));\n        map.set(container, res);\n    }\n    return res;\n}\nexport class Plugins {\n    constructor(engine) {\n        this._engine = engine;\n        this.plugins = [];\n        this.interactorsInitializers = new Map();\n        this.moversInitializers = new Map();\n        this.updatersInitializers = new Map();\n        this.interactors = new Map();\n        this.movers = new Map();\n        this.updaters = new Map();\n        this.presets = new Map();\n        this.drawers = new Map();\n        this.pathGenerators = new Map();\n    }\n    addInteractor(name, initInteractor) {\n        this.interactorsInitializers.set(name, initInteractor);\n    }\n    addParticleMover(name, initMover) {\n        this.moversInitializers.set(name, initMover);\n    }\n    addParticleUpdater(name, initUpdater) {\n        this.updatersInitializers.set(name, initUpdater);\n    }\n    addPathGenerator(type, pathGenerator) {\n        if (!this.getPathGenerator(type)) {\n            this.pathGenerators.set(type, pathGenerator);\n        }\n    }\n    addPlugin(plugin) {\n        if (!this.getPlugin(plugin.id)) {\n            this.plugins.push(plugin);\n        }\n    }\n    addPreset(presetKey, options, override = false) {\n        if (override || !this.getPreset(presetKey)) {\n            this.presets.set(presetKey, options);\n        }\n    }\n    addShapeDrawer(type, drawer) {\n        if (!this.getShapeDrawer(type)) {\n            this.drawers.set(type, drawer);\n        }\n    }\n    destroy(container) {\n        this.updaters.delete(container);\n        this.movers.delete(container);\n        this.interactors.delete(container);\n    }\n    getAvailablePlugins(container) {\n        const res = new Map();\n        for (const plugin of this.plugins) {\n            if (!plugin.needsPlugin(container.actualOptions)) {\n                continue;\n            }\n            res.set(plugin.id, plugin.getPlugin(container));\n        }\n        return res;\n    }\n    getInteractors(container, force = false) {\n        return getItemsFromInitializer(container, this.interactors, this.interactorsInitializers, force);\n    }\n    getMovers(container, force = false) {\n        return getItemsFromInitializer(container, this.movers, this.moversInitializers, force);\n    }\n    getPathGenerator(type) {\n        return this.pathGenerators.get(type);\n    }\n    getPlugin(plugin) {\n        return this.plugins.find((t) => t.id === plugin);\n    }\n    getPreset(preset) {\n        return this.presets.get(preset);\n    }\n    getShapeDrawer(type) {\n        return this.drawers.get(type);\n    }\n    getSupportedShapes() {\n        return this.drawers.keys();\n    }\n    getUpdaters(container, force = false) {\n        return getItemsFromInitializer(container, this.updaters, this.updatersInitializers, force);\n    }\n    loadOptions(options, sourceOptions) {\n        for (const plugin of this.plugins) {\n            plugin.loadOptions(options, sourceOptions);\n        }\n    }\n    loadParticlesOptions(container, options, ...sourceOptions) {\n        const updaters = this.updaters.get(container);\n        if (!updaters) {\n            return;\n        }\n        for (const updater of updaters) {\n            if (updater.loadOptions) {\n                updater.loadOptions(options, ...sourceOptions);\n            }\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}