{"ast":null,"code":"import { Circle } from \"./Circle\";\nimport { Rectangle } from \"./Rectangle\";\nimport { getDistance } from \"../../Utils/NumberUtils\";\nexport class QuadTree {\n  constructor(rectangle, capacity) {\n    this.rectangle = rectangle;\n    this.capacity = capacity;\n    this.points = [];\n    this.divided = false;\n  }\n  insert(point) {\n    var _a, _b, _c, _d, _e;\n    if (!this.rectangle.contains(point.position)) {\n      return false;\n    }\n    if (this.points.length < this.capacity) {\n      this.points.push(point);\n      return true;\n    }\n    if (!this.divided) {\n      this.subdivide();\n    }\n    return (_e = ((_a = this.northEast) === null || _a === void 0 ? void 0 : _a.insert(point)) || ((_b = this.northWest) === null || _b === void 0 ? void 0 : _b.insert(point)) || ((_c = this.southEast) === null || _c === void 0 ? void 0 : _c.insert(point)) || ((_d = this.southWest) === null || _d === void 0 ? void 0 : _d.insert(point))) !== null && _e !== void 0 ? _e : false;\n  }\n  query(range, check, found) {\n    var _a, _b, _c, _d;\n    const res = found !== null && found !== void 0 ? found : [];\n    if (!range.intersects(this.rectangle)) {\n      return [];\n    }\n    for (const p of this.points) {\n      if (!range.contains(p.position) && getDistance(range.position, p.position) > p.particle.getRadius() && (!check || check(p.particle))) {\n        continue;\n      }\n      res.push(p.particle);\n    }\n    if (this.divided) {\n      (_a = this.northEast) === null || _a === void 0 ? void 0 : _a.query(range, check, res);\n      (_b = this.northWest) === null || _b === void 0 ? void 0 : _b.query(range, check, res);\n      (_c = this.southEast) === null || _c === void 0 ? void 0 : _c.query(range, check, res);\n      (_d = this.southWest) === null || _d === void 0 ? void 0 : _d.query(range, check, res);\n    }\n    return res;\n  }\n  queryCircle(position, radius, check) {\n    return this.query(new Circle(position.x, position.y, radius), check);\n  }\n  queryRectangle(position, size, check) {\n    return this.query(new Rectangle(position.x, position.y, size.width, size.height), check);\n  }\n  subdivide() {\n    const x = this.rectangle.position.x,\n      y = this.rectangle.position.y,\n      w = this.rectangle.size.width,\n      h = this.rectangle.size.height,\n      capacity = this.capacity;\n    this.northEast = new QuadTree(new Rectangle(x, y, w / 2, h / 2), capacity);\n    this.northWest = new QuadTree(new Rectangle(x + w / 2, y, w / 2, h / 2), capacity);\n    this.southEast = new QuadTree(new Rectangle(x, y + h / 2, w / 2, h / 2), capacity);\n    this.southWest = new QuadTree(new Rectangle(x + w / 2, y + h / 2, w / 2, h / 2), capacity);\n    this.divided = true;\n  }\n}","map":{"version":3,"names":["Circle","Rectangle","getDistance","QuadTree","constructor","rectangle","capacity","points","divided","insert","point","_a","_b","_c","_d","_e","contains","position","length","push","subdivide","northEast","northWest","southEast","southWest","query","range","check","found","res","intersects","p","particle","getRadius","queryCircle","radius","x","y","queryRectangle","size","width","height","w","h"],"sources":["/Users/williamhart/Desktop/whportfolio/wh_portfolio/node_modules/tsparticles-engine/esm/Core/Utils/QuadTree.js"],"sourcesContent":["import { Circle } from \"./Circle\";\nimport { Rectangle } from \"./Rectangle\";\nimport { getDistance } from \"../../Utils/NumberUtils\";\nexport class QuadTree {\n    constructor(rectangle, capacity) {\n        this.rectangle = rectangle;\n        this.capacity = capacity;\n        this.points = [];\n        this.divided = false;\n    }\n    insert(point) {\n        var _a, _b, _c, _d, _e;\n        if (!this.rectangle.contains(point.position)) {\n            return false;\n        }\n        if (this.points.length < this.capacity) {\n            this.points.push(point);\n            return true;\n        }\n        if (!this.divided) {\n            this.subdivide();\n        }\n        return ((_e = (((_a = this.northEast) === null || _a === void 0 ? void 0 : _a.insert(point)) ||\n            ((_b = this.northWest) === null || _b === void 0 ? void 0 : _b.insert(point)) ||\n            ((_c = this.southEast) === null || _c === void 0 ? void 0 : _c.insert(point)) ||\n            ((_d = this.southWest) === null || _d === void 0 ? void 0 : _d.insert(point)))) !== null && _e !== void 0 ? _e : false);\n    }\n    query(range, check, found) {\n        var _a, _b, _c, _d;\n        const res = found !== null && found !== void 0 ? found : [];\n        if (!range.intersects(this.rectangle)) {\n            return [];\n        }\n        for (const p of this.points) {\n            if (!range.contains(p.position) &&\n                getDistance(range.position, p.position) > p.particle.getRadius() &&\n                (!check || check(p.particle))) {\n                continue;\n            }\n            res.push(p.particle);\n        }\n        if (this.divided) {\n            (_a = this.northEast) === null || _a === void 0 ? void 0 : _a.query(range, check, res);\n            (_b = this.northWest) === null || _b === void 0 ? void 0 : _b.query(range, check, res);\n            (_c = this.southEast) === null || _c === void 0 ? void 0 : _c.query(range, check, res);\n            (_d = this.southWest) === null || _d === void 0 ? void 0 : _d.query(range, check, res);\n        }\n        return res;\n    }\n    queryCircle(position, radius, check) {\n        return this.query(new Circle(position.x, position.y, radius), check);\n    }\n    queryRectangle(position, size, check) {\n        return this.query(new Rectangle(position.x, position.y, size.width, size.height), check);\n    }\n    subdivide() {\n        const x = this.rectangle.position.x, y = this.rectangle.position.y, w = this.rectangle.size.width, h = this.rectangle.size.height, capacity = this.capacity;\n        this.northEast = new QuadTree(new Rectangle(x, y, w / 2, h / 2), capacity);\n        this.northWest = new QuadTree(new Rectangle(x + w / 2, y, w / 2, h / 2), capacity);\n        this.southEast = new QuadTree(new Rectangle(x, y + h / 2, w / 2, h / 2), capacity);\n        this.southWest = new QuadTree(new Rectangle(x + w / 2, y + h / 2, w / 2, h / 2), capacity);\n        this.divided = true;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}