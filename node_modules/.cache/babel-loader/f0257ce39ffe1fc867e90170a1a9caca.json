{"ast":null,"code":"import { calcExactPositionOrRandomFromSize, clamp, getDistance, getParticleBaseVelocity, getParticleDirectionAngle, getRandom, getRangeMax, getRangeMin, getRangeValue, getValue, randomInRange, setRangeValue } from \"../Utils/NumberUtils\";\nimport { deepExtend, isInArray, itemFromSingleOrMultiple } from \"../Utils/Utils\";\nimport { getHslFromAnimation, rangeColorToRgb } from \"../Utils/ColorUtils\";\nimport { Interactivity } from \"../Options/Classes/Interactivity/Interactivity\";\nimport { Shape } from \"../Options/Classes/Particles/Shape/Shape\";\nimport { Vector } from \"./Utils/Vector\";\nimport { Vector3d } from \"./Utils/Vector3d\";\nimport { alterHsl } from \"../Utils/CanvasUtils\";\nimport { loadParticlesOptions } from \"../Utils/OptionsUtils\";\nconst fixOutMode = data => {\n  if (!(isInArray(data.outMode, data.checkModes) || isInArray(data.outMode, data.checkModes))) {\n    return;\n  }\n  if (data.coord > data.maxCoord - data.radius * 2) {\n    data.setCb(-data.radius);\n  } else if (data.coord < data.radius * 2) {\n    data.setCb(data.radius);\n  }\n};\nexport class Particle {\n  constructor(engine, id, container, position, overrideOptions, group) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;\n    this.id = id;\n    this.container = container;\n    this.group = group;\n    this._engine = engine;\n    this.fill = true;\n    this.pathRotation = false;\n    this.close = true;\n    this.lastPathTime = 0;\n    this.destroyed = false;\n    this.unbreakable = false;\n    this.rotation = 0;\n    this.misplaced = false;\n    this.retina = {\n      maxDistance: {}\n    };\n    this.outType = \"normal\";\n    this.ignoresResizeRatio = true;\n    const pxRatio = container.retina.pixelRatio,\n      mainOptions = container.actualOptions,\n      particlesOptions = loadParticlesOptions(this._engine, container, mainOptions.particles),\n      shapeType = particlesOptions.shape.type,\n      reduceDuplicates = particlesOptions.reduceDuplicates;\n    this.shape = itemFromSingleOrMultiple(shapeType, this.id, reduceDuplicates);\n    if (overrideOptions === null || overrideOptions === void 0 ? void 0 : overrideOptions.shape) {\n      if (overrideOptions.shape.type) {\n        const overrideShapeType = overrideOptions.shape.type;\n        this.shape = itemFromSingleOrMultiple(overrideShapeType, this.id, reduceDuplicates);\n      }\n      const shapeOptions = new Shape();\n      shapeOptions.load(overrideOptions.shape);\n      if (this.shape) {\n        this.shapeData = this._loadShapeData(shapeOptions, reduceDuplicates);\n      }\n    } else {\n      this.shapeData = this._loadShapeData(particlesOptions.shape, reduceDuplicates);\n    }\n    particlesOptions.load(overrideOptions);\n    particlesOptions.load((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles);\n    this.interactivity = new Interactivity(engine, container);\n    this.interactivity.load(container.actualOptions.interactivity);\n    this.interactivity.load(particlesOptions.interactivity);\n    this.fill = (_c = (_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.fill) !== null && _c !== void 0 ? _c : this.fill;\n    this.close = (_e = (_d = this.shapeData) === null || _d === void 0 ? void 0 : _d.close) !== null && _e !== void 0 ? _e : this.close;\n    this.options = particlesOptions;\n    const pathOptions = this.options.move.path;\n    this.pathDelay = getValue(pathOptions.delay) * 1000;\n    if (pathOptions.generator) {\n      this.pathGenerator = this._engine.plugins.getPathGenerator(pathOptions.generator);\n      if (this.pathGenerator && container.addPath(pathOptions.generator, this.pathGenerator)) {\n        this.pathGenerator.init(container);\n      }\n    }\n    const zIndexValue = getRangeValue(this.options.zIndex.value);\n    container.retina.initParticle(this);\n    const sizeOptions = this.options.size,\n      sizeRange = sizeOptions.value,\n      sizeAnimation = sizeOptions.animation;\n    this.size = {\n      enable: sizeOptions.animation.enable,\n      value: getRangeValue(sizeOptions.value) * container.retina.pixelRatio,\n      max: getRangeMax(sizeRange) * pxRatio,\n      min: getRangeMin(sizeRange) * pxRatio,\n      loops: 0,\n      maxLoops: getRangeValue(sizeOptions.animation.count)\n    };\n    if (sizeAnimation.enable) {\n      this.size.status = 0;\n      this.size.decay = 1 - getRangeValue(sizeAnimation.decay);\n      switch (sizeAnimation.startValue) {\n        case \"min\":\n          this.size.value = this.size.min;\n          this.size.status = 0;\n          break;\n        case \"random\":\n          this.size.value = randomInRange(this.size) * pxRatio;\n          this.size.status = getRandom() >= 0.5 ? 0 : 1;\n          break;\n        case \"max\":\n        default:\n          this.size.value = this.size.max;\n          this.size.status = 1;\n          break;\n      }\n      this.size.velocity = ((_f = this.retina.sizeAnimationSpeed) !== null && _f !== void 0 ? _f : container.retina.sizeAnimationSpeed) / 100 * container.retina.reduceFactor;\n      if (!sizeAnimation.sync) {\n        this.size.velocity *= getRandom();\n      }\n    }\n    this.bubble = {\n      inRange: false\n    };\n    this.slow = {\n      inRange: false,\n      factor: 1\n    };\n    this.position = this._calcPosition(container, position, clamp(zIndexValue, 0, container.zLayers));\n    this.initialPosition = this.position.copy();\n    const canvasSize = container.canvas.size,\n      moveCenter = this.options.move.center,\n      isCenterPercent = moveCenter.mode === \"percent\";\n    this.moveCenter = {\n      x: ((_g = moveCenter.x) !== null && _g !== void 0 ? _g : 50) * (isCenterPercent ? canvasSize.width / 100 : 1),\n      y: ((_h = moveCenter.y) !== null && _h !== void 0 ? _h : 50) * (isCenterPercent ? canvasSize.height / 100 : 1),\n      radius: (_j = this.options.move.center.radius) !== null && _j !== void 0 ? _j : 0,\n      mode: (_k = this.options.move.center.mode) !== null && _k !== void 0 ? _k : \"percent\"\n    };\n    this.direction = getParticleDirectionAngle(this.options.move.direction, this.position, this.moveCenter);\n    switch (this.options.move.direction) {\n      case \"inside\":\n        this.outType = \"inside\";\n        break;\n      case \"outside\":\n        this.outType = \"outside\";\n        break;\n    }\n    this.initialVelocity = this._calculateVelocity();\n    this.velocity = this.initialVelocity.copy();\n    this.moveDecay = 1 - getRangeValue(this.options.move.decay);\n    this.offset = Vector.origin;\n    const particles = container.particles;\n    particles.needsSort = particles.needsSort || particles.lastZIndex < this.position.z;\n    particles.lastZIndex = this.position.z;\n    this.zIndexFactor = this.position.z / container.zLayers;\n    this.sides = 24;\n    let drawer = container.drawers.get(this.shape);\n    if (!drawer) {\n      drawer = this._engine.plugins.getShapeDrawer(this.shape);\n      if (drawer) {\n        container.drawers.set(this.shape, drawer);\n      }\n    }\n    if (drawer === null || drawer === void 0 ? void 0 : drawer.loadShape) {\n      drawer === null || drawer === void 0 ? void 0 : drawer.loadShape(this);\n    }\n    const sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n    if (sideCountFunc) {\n      this.sides = sideCountFunc(this);\n    }\n    this.spawning = false;\n    this.shadowColor = rangeColorToRgb(this.options.shadow.color);\n    for (const updater of container.particles.updaters) {\n      (_l = updater.init) === null || _l === void 0 ? void 0 : _l.call(updater, this);\n    }\n    for (const mover of container.particles.movers) {\n      (_m = mover.init) === null || _m === void 0 ? void 0 : _m.call(mover, this);\n    }\n    if (drawer === null || drawer === void 0 ? void 0 : drawer.particleInit) {\n      drawer.particleInit(container, this);\n    }\n    for (const [, plugin] of container.plugins) {\n      (_o = plugin.particleCreated) === null || _o === void 0 ? void 0 : _o.call(plugin, this);\n    }\n  }\n  destroy(override) {\n    if (this.unbreakable || this.destroyed) {\n      return;\n    }\n    this.destroyed = true;\n    this.bubble.inRange = false;\n    this.slow.inRange = false;\n    for (const [, plugin] of this.container.plugins) {\n      if (plugin.particleDestroyed) {\n        plugin.particleDestroyed(this, override);\n      }\n    }\n    for (const updater of this.container.particles.updaters) {\n      if (updater.particleDestroyed) {\n        updater.particleDestroyed(this, override);\n      }\n    }\n  }\n  draw(delta) {\n    const container = this.container;\n    for (const [, plugin] of container.plugins) {\n      container.canvas.drawParticlePlugin(plugin, this, delta);\n    }\n    container.canvas.drawParticle(this, delta);\n  }\n  getFillColor() {\n    var _a, _b;\n    const color = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : getHslFromAnimation(this.color);\n    if (color && this.roll && (this.backColor || this.roll.alter)) {\n      const backFactor = this.roll.horizontal && this.roll.vertical ? 2 : 1,\n        backSum = this.roll.horizontal ? Math.PI / 2 : 0,\n        rolled = Math.floor((((_b = this.roll.angle) !== null && _b !== void 0 ? _b : 0) + backSum) / (Math.PI / backFactor)) % 2;\n      if (rolled) {\n        if (this.backColor) {\n          return this.backColor;\n        }\n        if (this.roll.alter) {\n          return alterHsl(color, this.roll.alter.type, this.roll.alter.value);\n        }\n      }\n    }\n    return color;\n  }\n  getMass() {\n    return this.getRadius() ** 2 * Math.PI / 2;\n  }\n  getPosition() {\n    return {\n      x: this.position.x + this.offset.x,\n      y: this.position.y + this.offset.y,\n      z: this.position.z\n    };\n  }\n  getRadius() {\n    var _a;\n    return (_a = this.bubble.radius) !== null && _a !== void 0 ? _a : this.size.value;\n  }\n  getStrokeColor() {\n    var _a, _b;\n    return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : getHslFromAnimation(this.strokeColor)) !== null && _b !== void 0 ? _b : this.getFillColor();\n  }\n  isInsideCanvas() {\n    const radius = this.getRadius(),\n      canvasSize = this.container.canvas.size;\n    return this.position.x >= -radius && this.position.y >= -radius && this.position.y <= canvasSize.height + radius && this.position.x <= canvasSize.width + radius;\n  }\n  isVisible() {\n    return !this.destroyed && !this.spawning && this.isInsideCanvas();\n  }\n  reset() {\n    if (this.opacity) {\n      this.opacity.loops = 0;\n    }\n    this.size.loops = 0;\n  }\n  _calcPosition(container, position, zIndex) {\n    let tryCount = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    var _a, _b, _c, _d;\n    for (const [, plugin] of container.plugins) {\n      const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n      if (pluginPos !== undefined) {\n        return Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n      }\n    }\n    const canvasSize = container.canvas.size,\n      exactPosition = calcExactPositionOrRandomFromSize({\n        size: canvasSize,\n        position: position\n      }),\n      pos = Vector3d.create(exactPosition.x, exactPosition.y, zIndex),\n      radius = this.getRadius(),\n      outModes = this.options.move.outModes,\n      fixHorizontal = outMode => {\n        fixOutMode({\n          outMode,\n          checkModes: [\"bounce\", \"bounce-horizontal\"],\n          coord: pos.x,\n          maxCoord: container.canvas.size.width,\n          setCb: value => pos.x += value,\n          radius\n        });\n      },\n      fixVertical = outMode => {\n        fixOutMode({\n          outMode,\n          checkModes: [\"bounce\", \"bounce-vertical\"],\n          coord: pos.y,\n          maxCoord: container.canvas.size.height,\n          setCb: value => pos.y += value,\n          radius\n        });\n      };\n    fixHorizontal((_a = outModes.left) !== null && _a !== void 0 ? _a : outModes.default);\n    fixHorizontal((_b = outModes.right) !== null && _b !== void 0 ? _b : outModes.default);\n    fixVertical((_c = outModes.top) !== null && _c !== void 0 ? _c : outModes.default);\n    fixVertical((_d = outModes.bottom) !== null && _d !== void 0 ? _d : outModes.default);\n    if (this._checkOverlap(pos, tryCount)) {\n      return this._calcPosition(container, undefined, zIndex, tryCount + 1);\n    }\n    return pos;\n  }\n  _calculateVelocity() {\n    const baseVelocity = getParticleBaseVelocity(this.direction);\n    const res = baseVelocity.copy();\n    const moveOptions = this.options.move;\n    if (moveOptions.direction === \"inside\" || moveOptions.direction === \"outside\") {\n      return res;\n    }\n    const rad = Math.PI / 180 * getRangeValue(moveOptions.angle.value);\n    const radOffset = Math.PI / 180 * getRangeValue(moveOptions.angle.offset);\n    const range = {\n      left: radOffset - rad / 2,\n      right: radOffset + rad / 2\n    };\n    if (!moveOptions.straight) {\n      res.angle += randomInRange(setRangeValue(range.left, range.right));\n    }\n    if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n      res.length *= getRandom();\n    }\n    return res;\n  }\n  _checkOverlap(pos) {\n    let tryCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const collisionsOptions = this.options.collisions,\n      radius = this.getRadius();\n    if (!collisionsOptions.enable) {\n      return false;\n    }\n    const overlapOptions = collisionsOptions.overlap;\n    if (overlapOptions.enable) {\n      return false;\n    }\n    const retries = overlapOptions.retries;\n    if (retries >= 0 && tryCount > retries) {\n      throw new Error(\"Particle is overlapping and can't be placed\");\n    }\n    let overlaps = false;\n    for (const particle of this.container.particles.array) {\n      if (getDistance(pos, particle.position) < radius + particle.getRadius()) {\n        overlaps = true;\n        break;\n      }\n    }\n    return overlaps;\n  }\n  _loadShapeData(shapeOptions, reduceDuplicates) {\n    const shapeData = shapeOptions.options[this.shape];\n    if (shapeData) {\n      return deepExtend({}, itemFromSingleOrMultiple(shapeData, this.id, reduceDuplicates));\n    }\n  }\n}","map":{"version":3,"names":["calcExactPositionOrRandomFromSize","clamp","getDistance","getParticleBaseVelocity","getParticleDirectionAngle","getRandom","getRangeMax","getRangeMin","getRangeValue","getValue","randomInRange","setRangeValue","deepExtend","isInArray","itemFromSingleOrMultiple","getHslFromAnimation","rangeColorToRgb","Interactivity","Shape","Vector","Vector3d","alterHsl","loadParticlesOptions","fixOutMode","data","outMode","checkModes","coord","maxCoord","radius","setCb","Particle","constructor","engine","id","container","position","overrideOptions","group","_a","_b","_c","_d","_e","_f","_g","_h","_j","_k","_l","_m","_o","_engine","fill","pathRotation","close","lastPathTime","destroyed","unbreakable","rotation","misplaced","retina","maxDistance","outType","ignoresResizeRatio","pxRatio","pixelRatio","mainOptions","actualOptions","particlesOptions","particles","shapeType","shape","type","reduceDuplicates","overrideShapeType","shapeOptions","load","shapeData","_loadShapeData","interactivity","options","pathOptions","move","path","pathDelay","delay","generator","pathGenerator","plugins","getPathGenerator","addPath","init","zIndexValue","zIndex","value","initParticle","sizeOptions","size","sizeRange","sizeAnimation","animation","enable","max","min","loops","maxLoops","count","status","decay","startValue","velocity","sizeAnimationSpeed","reduceFactor","sync","bubble","inRange","slow","factor","_calcPosition","zLayers","initialPosition","copy","canvasSize","canvas","moveCenter","center","isCenterPercent","mode","x","width","y","height","direction","initialVelocity","_calculateVelocity","moveDecay","offset","origin","needsSort","lastZIndex","z","zIndexFactor","sides","drawer","drawers","get","getShapeDrawer","set","loadShape","sideCountFunc","getSidesCount","spawning","shadowColor","shadow","color","updater","updaters","call","mover","movers","particleInit","plugin","particleCreated","destroy","override","particleDestroyed","draw","delta","drawParticlePlugin","drawParticle","getFillColor","roll","backColor","alter","backFactor","horizontal","vertical","backSum","Math","PI","rolled","floor","angle","getMass","getRadius","getPosition","getStrokeColor","strokeColor","isInsideCanvas","isVisible","reset","opacity","tryCount","pluginPos","particlePosition","undefined","create","exactPosition","pos","outModes","fixHorizontal","fixVertical","left","default","right","top","bottom","_checkOverlap","baseVelocity","res","moveOptions","rad","radOffset","range","straight","random","speed","length","collisionsOptions","collisions","overlapOptions","overlap","retries","Error","overlaps","particle","array"],"sources":["/Users/williamhart/Desktop/whportfolio/wh_portfolio/node_modules/tsparticles-engine/esm/Core/Particle.js"],"sourcesContent":["import { calcExactPositionOrRandomFromSize, clamp, getDistance, getParticleBaseVelocity, getParticleDirectionAngle, getRandom, getRangeMax, getRangeMin, getRangeValue, getValue, randomInRange, setRangeValue, } from \"../Utils/NumberUtils\";\nimport { deepExtend, isInArray, itemFromSingleOrMultiple } from \"../Utils/Utils\";\nimport { getHslFromAnimation, rangeColorToRgb } from \"../Utils/ColorUtils\";\nimport { Interactivity } from \"../Options/Classes/Interactivity/Interactivity\";\nimport { Shape } from \"../Options/Classes/Particles/Shape/Shape\";\nimport { Vector } from \"./Utils/Vector\";\nimport { Vector3d } from \"./Utils/Vector3d\";\nimport { alterHsl } from \"../Utils/CanvasUtils\";\nimport { loadParticlesOptions } from \"../Utils/OptionsUtils\";\nconst fixOutMode = (data) => {\n    if (!(isInArray(data.outMode, data.checkModes) || isInArray(data.outMode, data.checkModes))) {\n        return;\n    }\n    if (data.coord > data.maxCoord - data.radius * 2) {\n        data.setCb(-data.radius);\n    }\n    else if (data.coord < data.radius * 2) {\n        data.setCb(data.radius);\n    }\n};\nexport class Particle {\n    constructor(engine, id, container, position, overrideOptions, group) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;\n        this.id = id;\n        this.container = container;\n        this.group = group;\n        this._engine = engine;\n        this.fill = true;\n        this.pathRotation = false;\n        this.close = true;\n        this.lastPathTime = 0;\n        this.destroyed = false;\n        this.unbreakable = false;\n        this.rotation = 0;\n        this.misplaced = false;\n        this.retina = {\n            maxDistance: {},\n        };\n        this.outType = \"normal\";\n        this.ignoresResizeRatio = true;\n        const pxRatio = container.retina.pixelRatio, mainOptions = container.actualOptions, particlesOptions = loadParticlesOptions(this._engine, container, mainOptions.particles), shapeType = particlesOptions.shape.type, reduceDuplicates = particlesOptions.reduceDuplicates;\n        this.shape = itemFromSingleOrMultiple(shapeType, this.id, reduceDuplicates);\n        if (overrideOptions === null || overrideOptions === void 0 ? void 0 : overrideOptions.shape) {\n            if (overrideOptions.shape.type) {\n                const overrideShapeType = overrideOptions.shape.type;\n                this.shape = itemFromSingleOrMultiple(overrideShapeType, this.id, reduceDuplicates);\n            }\n            const shapeOptions = new Shape();\n            shapeOptions.load(overrideOptions.shape);\n            if (this.shape) {\n                this.shapeData = this._loadShapeData(shapeOptions, reduceDuplicates);\n            }\n        }\n        else {\n            this.shapeData = this._loadShapeData(particlesOptions.shape, reduceDuplicates);\n        }\n        particlesOptions.load(overrideOptions);\n        particlesOptions.load((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles);\n        this.interactivity = new Interactivity(engine, container);\n        this.interactivity.load(container.actualOptions.interactivity);\n        this.interactivity.load(particlesOptions.interactivity);\n        this.fill = (_c = (_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.fill) !== null && _c !== void 0 ? _c : this.fill;\n        this.close = (_e = (_d = this.shapeData) === null || _d === void 0 ? void 0 : _d.close) !== null && _e !== void 0 ? _e : this.close;\n        this.options = particlesOptions;\n        const pathOptions = this.options.move.path;\n        this.pathDelay = getValue(pathOptions.delay) * 1000;\n        if (pathOptions.generator) {\n            this.pathGenerator = this._engine.plugins.getPathGenerator(pathOptions.generator);\n            if (this.pathGenerator && container.addPath(pathOptions.generator, this.pathGenerator)) {\n                this.pathGenerator.init(container);\n            }\n        }\n        const zIndexValue = getRangeValue(this.options.zIndex.value);\n        container.retina.initParticle(this);\n        const sizeOptions = this.options.size, sizeRange = sizeOptions.value, sizeAnimation = sizeOptions.animation;\n        this.size = {\n            enable: sizeOptions.animation.enable,\n            value: getRangeValue(sizeOptions.value) * container.retina.pixelRatio,\n            max: getRangeMax(sizeRange) * pxRatio,\n            min: getRangeMin(sizeRange) * pxRatio,\n            loops: 0,\n            maxLoops: getRangeValue(sizeOptions.animation.count),\n        };\n        if (sizeAnimation.enable) {\n            this.size.status = 0;\n            this.size.decay = 1 - getRangeValue(sizeAnimation.decay);\n            switch (sizeAnimation.startValue) {\n                case \"min\":\n                    this.size.value = this.size.min;\n                    this.size.status = 0;\n                    break;\n                case \"random\":\n                    this.size.value = randomInRange(this.size) * pxRatio;\n                    this.size.status = getRandom() >= 0.5 ? 0 : 1;\n                    break;\n                case \"max\":\n                default:\n                    this.size.value = this.size.max;\n                    this.size.status = 1;\n                    break;\n            }\n            this.size.velocity =\n                (((_f = this.retina.sizeAnimationSpeed) !== null && _f !== void 0 ? _f : container.retina.sizeAnimationSpeed) / 100) *\n                    container.retina.reduceFactor;\n            if (!sizeAnimation.sync) {\n                this.size.velocity *= getRandom();\n            }\n        }\n        this.bubble = {\n            inRange: false,\n        };\n        this.slow = {\n            inRange: false,\n            factor: 1,\n        };\n        this.position = this._calcPosition(container, position, clamp(zIndexValue, 0, container.zLayers));\n        this.initialPosition = this.position.copy();\n        const canvasSize = container.canvas.size, moveCenter = this.options.move.center, isCenterPercent = moveCenter.mode === \"percent\";\n        this.moveCenter = {\n            x: ((_g = moveCenter.x) !== null && _g !== void 0 ? _g : 50) * (isCenterPercent ? canvasSize.width / 100 : 1),\n            y: ((_h = moveCenter.y) !== null && _h !== void 0 ? _h : 50) * (isCenterPercent ? canvasSize.height / 100 : 1),\n            radius: (_j = this.options.move.center.radius) !== null && _j !== void 0 ? _j : 0,\n            mode: (_k = this.options.move.center.mode) !== null && _k !== void 0 ? _k : \"percent\",\n        };\n        this.direction = getParticleDirectionAngle(this.options.move.direction, this.position, this.moveCenter);\n        switch (this.options.move.direction) {\n            case \"inside\":\n                this.outType = \"inside\";\n                break;\n            case \"outside\":\n                this.outType = \"outside\";\n                break;\n        }\n        this.initialVelocity = this._calculateVelocity();\n        this.velocity = this.initialVelocity.copy();\n        this.moveDecay = 1 - getRangeValue(this.options.move.decay);\n        this.offset = Vector.origin;\n        const particles = container.particles;\n        particles.needsSort = particles.needsSort || particles.lastZIndex < this.position.z;\n        particles.lastZIndex = this.position.z;\n        this.zIndexFactor = this.position.z / container.zLayers;\n        this.sides = 24;\n        let drawer = container.drawers.get(this.shape);\n        if (!drawer) {\n            drawer = this._engine.plugins.getShapeDrawer(this.shape);\n            if (drawer) {\n                container.drawers.set(this.shape, drawer);\n            }\n        }\n        if (drawer === null || drawer === void 0 ? void 0 : drawer.loadShape) {\n            drawer === null || drawer === void 0 ? void 0 : drawer.loadShape(this);\n        }\n        const sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n        if (sideCountFunc) {\n            this.sides = sideCountFunc(this);\n        }\n        this.spawning = false;\n        this.shadowColor = rangeColorToRgb(this.options.shadow.color);\n        for (const updater of container.particles.updaters) {\n            (_l = updater.init) === null || _l === void 0 ? void 0 : _l.call(updater, this);\n        }\n        for (const mover of container.particles.movers) {\n            (_m = mover.init) === null || _m === void 0 ? void 0 : _m.call(mover, this);\n        }\n        if (drawer === null || drawer === void 0 ? void 0 : drawer.particleInit) {\n            drawer.particleInit(container, this);\n        }\n        for (const [, plugin] of container.plugins) {\n            (_o = plugin.particleCreated) === null || _o === void 0 ? void 0 : _o.call(plugin, this);\n        }\n    }\n    destroy(override) {\n        if (this.unbreakable || this.destroyed) {\n            return;\n        }\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        this.slow.inRange = false;\n        for (const [, plugin] of this.container.plugins) {\n            if (plugin.particleDestroyed) {\n                plugin.particleDestroyed(this, override);\n            }\n        }\n        for (const updater of this.container.particles.updaters) {\n            if (updater.particleDestroyed) {\n                updater.particleDestroyed(this, override);\n            }\n        }\n    }\n    draw(delta) {\n        const container = this.container;\n        for (const [, plugin] of container.plugins) {\n            container.canvas.drawParticlePlugin(plugin, this, delta);\n        }\n        container.canvas.drawParticle(this, delta);\n    }\n    getFillColor() {\n        var _a, _b;\n        const color = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : getHslFromAnimation(this.color);\n        if (color && this.roll && (this.backColor || this.roll.alter)) {\n            const backFactor = this.roll.horizontal && this.roll.vertical ? 2 : 1, backSum = this.roll.horizontal ? Math.PI / 2 : 0, rolled = Math.floor((((_b = this.roll.angle) !== null && _b !== void 0 ? _b : 0) + backSum) / (Math.PI / backFactor)) % 2;\n            if (rolled) {\n                if (this.backColor) {\n                    return this.backColor;\n                }\n                if (this.roll.alter) {\n                    return alterHsl(color, this.roll.alter.type, this.roll.alter.value);\n                }\n            }\n        }\n        return color;\n    }\n    getMass() {\n        return (this.getRadius() ** 2 * Math.PI) / 2;\n    }\n    getPosition() {\n        return {\n            x: this.position.x + this.offset.x,\n            y: this.position.y + this.offset.y,\n            z: this.position.z,\n        };\n    }\n    getRadius() {\n        var _a;\n        return (_a = this.bubble.radius) !== null && _a !== void 0 ? _a : this.size.value;\n    }\n    getStrokeColor() {\n        var _a, _b;\n        return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : getHslFromAnimation(this.strokeColor)) !== null && _b !== void 0 ? _b : this.getFillColor();\n    }\n    isInsideCanvas() {\n        const radius = this.getRadius(), canvasSize = this.container.canvas.size;\n        return (this.position.x >= -radius &&\n            this.position.y >= -radius &&\n            this.position.y <= canvasSize.height + radius &&\n            this.position.x <= canvasSize.width + radius);\n    }\n    isVisible() {\n        return !this.destroyed && !this.spawning && this.isInsideCanvas();\n    }\n    reset() {\n        if (this.opacity) {\n            this.opacity.loops = 0;\n        }\n        this.size.loops = 0;\n    }\n    _calcPosition(container, position, zIndex, tryCount = 0) {\n        var _a, _b, _c, _d;\n        for (const [, plugin] of container.plugins) {\n            const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n            if (pluginPos !== undefined) {\n                return Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n            }\n        }\n        const canvasSize = container.canvas.size, exactPosition = calcExactPositionOrRandomFromSize({\n            size: canvasSize,\n            position: position,\n        }), pos = Vector3d.create(exactPosition.x, exactPosition.y, zIndex), radius = this.getRadius(), outModes = this.options.move.outModes, fixHorizontal = (outMode) => {\n            fixOutMode({\n                outMode,\n                checkModes: [\"bounce\", \"bounce-horizontal\"],\n                coord: pos.x,\n                maxCoord: container.canvas.size.width,\n                setCb: (value) => (pos.x += value),\n                radius,\n            });\n        }, fixVertical = (outMode) => {\n            fixOutMode({\n                outMode,\n                checkModes: [\"bounce\", \"bounce-vertical\"],\n                coord: pos.y,\n                maxCoord: container.canvas.size.height,\n                setCb: (value) => (pos.y += value),\n                radius,\n            });\n        };\n        fixHorizontal((_a = outModes.left) !== null && _a !== void 0 ? _a : outModes.default);\n        fixHorizontal((_b = outModes.right) !== null && _b !== void 0 ? _b : outModes.default);\n        fixVertical((_c = outModes.top) !== null && _c !== void 0 ? _c : outModes.default);\n        fixVertical((_d = outModes.bottom) !== null && _d !== void 0 ? _d : outModes.default);\n        if (this._checkOverlap(pos, tryCount)) {\n            return this._calcPosition(container, undefined, zIndex, tryCount + 1);\n        }\n        return pos;\n    }\n    _calculateVelocity() {\n        const baseVelocity = getParticleBaseVelocity(this.direction);\n        const res = baseVelocity.copy();\n        const moveOptions = this.options.move;\n        if (moveOptions.direction === \"inside\" || moveOptions.direction === \"outside\") {\n            return res;\n        }\n        const rad = (Math.PI / 180) * getRangeValue(moveOptions.angle.value);\n        const radOffset = (Math.PI / 180) * getRangeValue(moveOptions.angle.offset);\n        const range = {\n            left: radOffset - rad / 2,\n            right: radOffset + rad / 2,\n        };\n        if (!moveOptions.straight) {\n            res.angle += randomInRange(setRangeValue(range.left, range.right));\n        }\n        if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n            res.length *= getRandom();\n        }\n        return res;\n    }\n    _checkOverlap(pos, tryCount = 0) {\n        const collisionsOptions = this.options.collisions, radius = this.getRadius();\n        if (!collisionsOptions.enable) {\n            return false;\n        }\n        const overlapOptions = collisionsOptions.overlap;\n        if (overlapOptions.enable) {\n            return false;\n        }\n        const retries = overlapOptions.retries;\n        if (retries >= 0 && tryCount > retries) {\n            throw new Error(\"Particle is overlapping and can't be placed\");\n        }\n        let overlaps = false;\n        for (const particle of this.container.particles.array) {\n            if (getDistance(pos, particle.position) < radius + particle.getRadius()) {\n                overlaps = true;\n                break;\n            }\n        }\n        return overlaps;\n    }\n    _loadShapeData(shapeOptions, reduceDuplicates) {\n        const shapeData = shapeOptions.options[this.shape];\n        if (shapeData) {\n            return deepExtend({}, itemFromSingleOrMultiple(shapeData, this.id, reduceDuplicates));\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}